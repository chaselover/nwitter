{"version":3,"sources":["fBase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","alt","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","marginTop","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c05d0c3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n// firebase의 database를 firestore라 함\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\n\n\n//   실질적 코드를 숨기고 .env에 정리하는 이유는 \n// github에 노출되는 것을 막기위함. 어차피 웹에서 firebase접근시 노출되나 github에서만 막기위함.\n// gitignore을 통해 업데이트하지 않을 수 있음.\n//  요약 : github에 내 key들을 보여주고싶지 않음.\n// Your web app's Firebase configuration\n// 환경변수 = .env(REACT_APP_써주는거 필수.)\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB-444pbALaNxUIKnTV-qFOwIswmauxFkI\",\n    authDomain: \"nwitter-8b625.firebaseapp.com\",\n    projectId: \"nwitter-8b625\",\n    storageBucket: \"nwitter-8b625.appspot.com\",\n    messagingSenderId: \"548960960262\",\n    appId: \"1:548960960262:web:60124462b903f4a6faa887\"\n  };\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// firebase는 모듈에서 나온것.\n//  모든걸 export하는 대신  auth서비스만 export\nexport const authService = firebase.auth();\nexport const firebaseInstance = firebase;\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import React, { Fragment,useState } from \"react\"\nimport { authService} from \"fBase\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount,setNewAccount] = useState(true);\n    const [error,setError] = useState(\"\")\n\n    // input이 change할때.\n    const onChange = (event) => {\n        // console.log(event.target.name);\n        // event중 변경이 일어난 부분인 name과 value\n        const { target: {name,value}} = event;\n        // name으로 구분하고 그 value값의 state를 바꿔줌.\n        if(name === \"email\"){\n            setEmail(value);\n        } else if (name ===\"password\"){\n            setPassword(value);\n        }\n    }\n\n// submit하는 순간에 새로고침되고 그순간 우리 react코드들도 사라짐.\n// refresh를 막아야함.\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        // 에러코드 제외시킬 코드\n        try{\n            let data;\n            if(newAccount){\n                //create account\n                // 공식문서에 Create보면 promise사용하라고 되어있음(async, await)\n                data = await authService.createUserWithEmailAndPassword(email, password)\n            } else {\n                // log in\n                data = await authService.signInWithEmailAndPassword(email, password)\n            }\n            console.log(data);\n        } catch(error) {\n            // console.log(error);\n            setError(error.message)\n        }\n\n    }\n    // newAccount 이전값을 가져와서 그 값에 반대된느 것을 리턴.\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n    return (\n        <Fragment>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input \n                    name= \"email\" \n                    type=\"email\" \n                    placeholder=\"Email\" \n                    required \n                    value={email} \n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input \n                    name=\"password\" \n                    type=\"password\" \n                    placeholder=\"Password\" \n                    required \n                    value={password} \n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value={newAccount ? \" Create Account\" : \" Log In \"} \n                    className=\"authInput authSubmit\"\n                />\n                {error && <span className=\"authError\">{error}</span>}           \n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"Sign in\" : \"Create Account\"}</span>\n        </Fragment>\n    )\n}\n\nexport default AuthForm","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { authService, firebaseInstance } from \"fBase\";\nimport AuthForm from \"components/AuthForm\"\n\n\n// 이메일 등록, 구글아이디 등록, 깃헙 아이디 등록\nconst Auth = () => {\n\n// 우리가 Log in에서 가져갈 control할 state들\n\n\n\n    const onSocialClick = async (event) => {\n        // console.log(event)\n        const {target:{name}} = event;\n        // using a popup으로 설정.(공식문서 따라서) 구글,깃헙 로그인 팝업창 띄워줌/\n        let provider;\n        if(name === \"google\"){\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name ===\"github\"){\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        const data = await authService.signInWithPopup(provider);\n        console.log(data);\n    }\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n              icon={faTwitter}\n              color={\"#04AAFF\"}\n              size=\"3x\"\n              style={{ marginBottom: 30 }}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n            <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n              Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\n            <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n              Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\n            </div>\n        </div>\n    )\n}\n\nexport default Auth;","import React, { useState, Fragment } from \"react\"\nimport { dbService, storageService } from \"fBase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\n// isOwner가 true면 Fragment가 보임.\nconst Nweet = ({nweetObj, isOwner}) => {\n    // editing mode인지 아닌지 true false로 알려줌\n    const [editing, setEditing] = useState(false);\n    // input에 입력된 text를 업데이트 해줌.\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\n    // 늘 Reference를 찾도록 노력해야함(reference는 어딘가의 object이기 때문.)\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\")\n        if(ok){\n            // delete nweet on DB (document의 id를 통해 삭제)\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\n            // delete attachment on storage (URL을 통해)\n            // refFromURL은 object로 부터 URL을 읽어오는 메소드.\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n        }\n    }\n    const toggleEditing = () => {\n        setEditing((prev) => !prev)\n    }\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        // console.log(nweetObj,newNweet);\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\n            text:newNweet,\n        });\n        setEditing(false);\n    }\n    const onChange = (event) => {\n        const {target:{value}} = event;\n        setNewNweet(value);\n    }\n    return(\n        <div className=\"nweet\">\n            {editing ? (\n                <Fragment>\n                    {isOwner &&\n                        <Fragment>\n                            <form className=\"container nweetEdit\" onSubmit={onSubmit}>\n                                <input type=\"text\" className=\"formInput\" autoFocus placeholder=\"Edit your nweet\" value={newNweet} onChange={onChange} required />\n                                <input type=\"submit\" className=\"formBtn\" value=\"Update Nweet\" />\n                            </form>\n                            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                                Cancel\n                            </span>\n                        </Fragment>    \n                    }\n                </Fragment>\n            ) : (\n                <Fragment>\n                <h4>{nweetObj.text}</h4>\n                {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} alt=\"\"/>}\n                {isOwner && (\n                    <div className=\"nweet__actions\">\n                        <span onClick={onDeleteClick}>\n                            <FontAwesomeIcon icon={faTrash} />\n                        </span>\n                        <span onClick={toggleEditing}>\n                            <FontAwesomeIcon icon={faPencilAlt} />\n                        </span>\n                    </div>\n                )}\n                </Fragment>\n            )}\n        </div>\n    )\n}\n\nexport default Nweet","import React, {useState} from \"react\";\nimport {storageService, dbService} from \"fBase\"\nimport {v4 as uuidv4} from \"uuid\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst NweetFactory = ({userObj}) => {\n    // submit을 위한 state\n    const [nweet, setNweet] = useState(\"\");\n    const [attachment,setAttachment] = useState(\"\")\n\n    // Create - collection add \n    // Read - collection get\n\n\n    /*const getNweets = async()=>{\n    // get은 collection에서 doc를 QuerySnapShat형태로 가져옴.\n    const dbNweets = await dbService.collection(\"nweets\").get();\n    // console.log(dbNweets);\n    dbNweets.forEach((document)=> {\n        // nweetObject에는 data와 id가 있다.\n        const nweetObject = {\n            ...document.data(),\n            id : document.id,\n        }\n        // set으로 시작하는 함수의 인자로 함수가 들어오면 \n        // prev를 써 이전값에 접근할수 있게 해줌.(배열형태로)\n        setNweets(prev => [nweetObject, ...prev])\n    });\n    }*/\n    const onSubmit = async (event) => {\n        if (nweet === \"\") {\n            return;\n          }\n        event.preventDefault();\n        // if문 안에서는 밖으로 못나오기 때문에 let변수처리해서 값이 바뀔수 있게끔.\n        let attachmentUrl = \"\";\n        if(attachment !== \"\") {\n        // child는 collection같은 느낌. 뒤에는 주소같이 \n        // 1. file의 reference를 만듦. \n        // (userid로 만든 refence폴더가 bucket에 들어가고 uuid로 랜덤한 이미지네임으로 data를 받을 준비를함.)\n        const attachmentRef = storageService\n            .ref()\n            .child(`${userObj.uid}/${uuidv4()}`)\n        //2. 파일데이터를 reference로 보냄.\n        // putString은 data와 data formet이 필요함. 사진을 url형식으로 refernce에 넣음.\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        // promise를 리턴하는 함수는 날 기다려줘! 의 의미\n        // console.log(await response.ref.getDownloadURL());\n        attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const nweetObj = {\n            text:nweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        }\n        // console.log(userObj); 여기서 id부분 찾아옴\n        // add는 doc를 collection에 넣음.\n        // add는 promise를 내보냄(마우스대면 나옴)\n        // => async await쓰기\n        await dbService.collection(\"nweets\").add(nweetObj);\n        setNweet(\"\");\n        setAttachment(\"\");\n    }\n    // event안에있는 target안에있는 value를 주세요\n    const onChange = (event) => {\n        const {\n            target:{value}\n        } = event;\n        setNweet(value);\n    }\n    const onFileChange = (event) => {\n        // console.log(event.target.files);\n        // event안의 target으로가서 files를 받아오는 ES6문법.\n        // files 안의 배열에서 \n        const {target:{files}} = event;\n        const theFile = files[0];\n        // console.log(theFile);\n        // FileReader API이용. MDN참조.\n        const reader = new FileReader();\n        // URL읽는게(loading이) 끝나면 finishedEvent를 갖게되는데 이걸 받아 가져옴.\n        // 이 객체 안의 result URL은 브라우저에서 볼수있는 사진에 대한 주소\n        reader.onloadend = (finishedEvent) => {\n            // console.log(finishedEvent);\n            const {currentTarget: {result}} = finishedEvent;\n            setAttachment(result);\n        }\n        // reader기능을 만들고 theFile의 URL을 읽어옴.\n        reader.readAsDataURL(theFile);\n    }\n    const onClearAttachment = () => setAttachment(\"\")\n    // image파일을 받을껀데 /(형식)이고 /*은 이미지파일이면 어떤형식이든 받는다는뜻.\n    return(\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n              <input\n                className=\"factoryInput__input\"\n                value={nweet}\n                onChange={onChange}\n                type=\"text\"\n                placeholder=\"What's on your mind?\"\n                maxLength={120}\n              />\n              <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n\n            <label for=\"attach-file\" className=\"factoryInput__label\">\n              <span>Add photos</span>\n              <FontAwesomeIcon icon={faPlus} />\n            </label>\n\n            <input \n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                  opacity: 0,\n                }} \n            />\n\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                      src={attachment}\n                      alt=\"\"\n                      style={{\n                        backgroundImage: attachment,\n                      }}\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                      <span>Remove</span>\n                      <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n                )\n            }    \n        </form>\n    )\n\n}\n\nexport default NweetFactory;","import { dbService } from \"fBase\";\nimport React, { useEffect,useState } from \"react\";\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\"\n\n// userObj props를받음(App로그인 -> 라우터 -> 홈)\n// 이제 로그인한 사람이 누군지 알고있음(수정,삭제 가능)\nconst Home = ({userObj}) => {\n    const [nweets,setNweets] = useState([]);\n\n    useEffect(()=>{\n        // getNweets();\n        // db를 실시간(realtime) 변화를 감지하는 onSnapshot!!!\n        // forEach를 하고 getNweets를 하거나(위에 주석한 방법)\n        // 배열을 만들고setNweets하는 방법 두가지 다 할수있음.\n        dbService.collection(\"nweets\").onSnapshot(snapshot => {\n            // console.log(snapshot.docs)\n            const nweetArray = snapshot.docs.map(doc => ({\n                id: doc.id, \n                ...doc.data(),\n            }));\n            // console.log(nweetArray);\n            setNweets(nweetArray);\n        })\n    },[])\n\n    return(\n        <div className=\"container\">\n            <NweetFactory userObj={userObj}/>\n            <div style={{ marginTop: 30 }}>\n                {nweets.map(nweet => (\n                    <Nweet key={nweet.id} nweetObj = {nweet} isOwner = {nweet.creatorId === userObj.uid}/>\n                ))}\n            </div>\n        </div>\n    )\n}\nexport default Home","import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst Navigation = ({userObj}) => {\n    return (\n        <nav>\n            <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n                <li>\n                    <Link to=\"/\" style={{ marginRight: 10 }}>\n                        <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n                    </Link>\n                </li>\n                <li>\n                    <Link\n                    to=\"/profile\"\n                    style={{\n                      marginLeft: 10,\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      alignItems: \"center\",\n                      fontSize: 12,\n                    }}\n                  >\n                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                    <span style={{ marginTop: 10 }}>\n                      {userObj.displayName\n                        ? `${userObj.displayName}의 Profile`\n                        : \"Profile\"}\n                    </span>\n                  </Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation;","import { authService } from \"fBase\";\nimport React, { useState } from \"react\"\nimport { useHistory } from \"react-router\";\n\n\n\nconst Profile = ({refreshUser, userObj}) => {\n    // hook를 통해 로그아웃 이벤트가 끝나면 다시 home으로 돌아갈 수 있도록\n    // redirect를 useHistory를 이용한 hook으로 구현.\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\")\n    }\n    const onChange = (event) => {\n        const {\n            target: {value}\n        } = event;\n        setNewDisplayName(value);\n    }\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            // console.log(userObj.updateProfile);\n            await userObj.updateProfile({\n                displayName: newDisplayName\n            })\n            // firebase update후 react.js profile을 새로고침하는 함수.\n            refreshUser();\n        }\n    }\n    /*\n    // where은 조건 필터 함수. where(A,연산자,B)\n    // DB data 필터링 하는 방법.\n    const getMyNweets = async () => {\n        const nweets = await dbService.collection(\"nweets\").where(\"creatorId\",\"==\", userObj.uid).orderBy(\"createAt\").get();\n        console.log(nweets.docs.map(doc => doc.data()));\n    }\n    useEffect(()=>{\n        getMyNweets()\n    },[])\n    */\n\n\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input onChange={onChange} value={newDisplayName} type=\"text\" className=\"formInput\" placeholder=\"Display name\" autoFocus />\n                <input\n                type=\"submit\"\n                value=\"Update Profile\"\n                className=\"formBtn\"\n                style={{\n                  marginTop: 10,\n                }}\n                />        \n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n            Log Out\n            </span>        \n        </div>\n    )\n}\nexport default Profile;","import React from \"react\"\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\"    \nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Navigation from \"components/Navigation\"\nimport Profile from \"routes/Profile\";\n\n\n\n// 우리의 인증여부 즉 로그인상태, 로그아웃상태에따라 render시킬 Route를 다르게 줄꺼임.\n// app으로부터 props인 isloggedin을 받음\n// router component는 router역할만 하기위해 hook을 제외.\n// redirect는 Route에 있을 때를 제외한 나머지 주소는 \"/\"(home)로 가라는뜻\n/* <Redirect from=\"*\" to=\"/\" /> */\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => {    \n    return(\n        <Router>\n        {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                {isLoggedIn ? (\n                    <div\n                    style={{\n                      maxWidth: 890,\n                      width: \"100%\",\n                      margin: \"0 auto\",\n                      marginTop: 80,\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                    }}\n                    >\n                        <Route exact path=\"/\">\n                            <Home userObj={userObj} />\n                        </Route>\n                        <Route exact path=\"/profile\">\n                            <Profile userObj={userObj} refreshUser={refreshUser} />\n                        </Route>\n                    </div>\n                ) : (\n                    <Route exact path=\"/\">\n                         <Auth /> \n                    </Route>\n                )}\n            </Switch>\n        </Router>\n    );\n};\nexport default AppRouter;","import React, { useState, Fragment, useEffect } from 'react';\nimport AppRouter from 'components/Router';\nimport {authService} from \"fBase\";\n\n\n// 로직은 App.js에서만 다룰것임.\nfunction App() {\n  const [init,setInit] = useState(false);\n  // currentUser메소드를 통해 로그인 여부를 판별할 수 있게 됨.\n  // currentUser는 로그아웃인지 firebase가 시작 안되서 유저가 없는건지 판별 어려움.\n  // const [isLoggedIn, setIsLogedIn] = useState(false);\n  const [userObj,setUserObj] = useState(null);\n  // 그래서 onAuthStateChanged가 로그인 여부를 감시함.\n  useEffect(()=>{\n    authService.onAuthStateChanged((user)=> {\n      // console.log(user)\n    if(user){\n      // setIsLogedIn(true);\n      // 로그인하면 로그인한 user를 받아서 저장함.\n      setUserObj({\n        displayName:user.displayName,\n        uid:user.uid,\n        updateProfile: (args) => user.updateProfile(args)\n      });\n    } else {\n      setUserObj(null);\n    }\n    // else {\n    //   setIsLogedIn(false);  \n    // }\n    setInit(true)\n    });\n  }, [])\n  // profile수정시 firebase는 변경되나 연결되어있지 않은 nav는 rerender되지 않음.\n  // 그래서 수정된 firebase정보로 react.js를 refresh해주는 함수를 만들었음. \n//  \"UserObj가 너무 커서 react가 이게 update됐는지 헷깔리기 때문에 동작을 안하는 error\"\n// userObj에서 쓰는 요소만 골라 담아 react가 판단하기 쉽게끔. 크기가 작은 object를 다시만들어서 해결.\n  const refreshUser = () => {\n    // console.log(authService.currentUser.displayName);\n    const user = authService.currentUser\n    setUserObj({\n      displayName:user.displayName,\n      uid:user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    });\n  }\n  // console.log(authService.currentUser)\n  // setInterval(() => {\n  //   console.log(authService.currentUser)\n  // },2000)\n  // login state없애고 userObj 있냐 없냐로 대체함.=>render하나 줄임.\n  return (\n    <Fragment>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"Initializing...\" }\n      <div className=\"footer\">&copy; Nwitter {new Date().getFullYear()}</div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"styles.css\"\n// console.log(firebase);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}